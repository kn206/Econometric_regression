J_matrix <- outer(x, y, J)
x <- seq(-4.5, 4.5, length.out = 100)
y <- seq(-4.5, 4.5, length.out = 100)
# Assuming the function J is a bivariate function of x and y
J <- function(x, y) {x^2 + y^2}
# Construct the 2D grid
J_matrix <- outer(x, y, J)
J_matrix
head(J_matrix)
head(J_matrix,n=2)
head(J_matrix)
library(graphics)
persp(x, y, J_matrix, theta = 30, phi = 30, col = heat.colors(100),
border = NULL, shade = 0.75, xlab = "x", ylab = "y", zlab = "J(x, y)")
simulated_annealing <- function(initial_state, nominating_kernels, cooling_schedule, max_steps) {
# Initialization
current_state <- initial_state
current_energy <- objective_function(current_state)
T <- cooling_schedule[1]
steps <- 0
# Main loop
while (steps < max_steps) {
steps <- steps + 1
# Generate a candidate state
candidate_state <- sample(nominating_kernels, 1)
# Compute the energy of the candidate state
candidate_energy <- objective_function(candidate_state)
# Update the current state and energy if the candidate state is better
if (candidate_energy < current_energy) {
current_state <- candidate_state
current_energy <- candidate_energy
} else {
# Accept the candidate state with a certain probability
if (runif(1) < exp(-(candidate_energy - current_energy) / T)) {
current_state <- candidate_state
current_energy <- candidate_energy
}
}
# Update the temperature
if (steps % length(cooling_schedule) == 0) {
simulated_annealing <- function(initial_state, nominating_kernels, cooling_schedule, max_steps) {
# Initialization
current_state <- initial_state
current_energy <- objective_function(current_state)
T <- cooling_schedule[1]
steps <- 0
# Main loop
while (steps < max_steps) {
steps <- steps + 1
# Generate a candidate state
candidate_state <- sample(nominating_kernels, 1)
# Compute the energy of the candidate state
candidate_energy <- objective_function(candidate_state)
# Update the current state and energy if the candidate state is better
if (candidate_energy < current_energy) {
current_state <- candidate_state
current_energy <- candidate_energy
} else {
# Accept the candidate state with a certain probability
if (runif(1) < exp(-(candidate_energy - current_energy) / T)) {
current_state <- candidate_state
current_energy <- candidate_energy
}
}
# Update the temperature
if (steps %% length(cooling_schedule) == 0) {
T <- cooling_schedule[which(steps == length(cooling_schedule)) + 1]
}
}
return(list(state = current_state, energy = current_energy))
}
result <- simulated_annealing(initial_state = 1, nominating_kernels = 1:5, cooling_schedule = seq(from = 10, to = 0.1, length.out = 10), max_steps = 100)
objective_function <- function(state) {
# Replace this line with your own logic to compute the energy of a state
energy <- sum(state)
return(energy)
}
simulated_annealing(initial_state, objective_function, ...)
simulated_annealing(initial_state, objective_function)
# Function to evaluate the objective function J(x)
J <- function(x) {
x1 <- x[1]
x2 <- x[2]
return(sqrt((1.5-x1+x1*x2) ² + (2.25-x1+x1*x2) ² + (2.625*x1+x1*x2) ²)))
simulated_annealing <- function(initial_state, nominating_kernels, cooling_schedule, max_steps) {
# Initialization
current_state <- initial_state
current_energy <- objective_function(current_state)
T <- cooling_schedule[1]
steps <- 0
# Main loop
while (steps < max_steps) {
steps <- steps + 1
# Generate a candidate state
candidate_state <- sample(nominating_kernels, 1)
# Compute the energy of the candidate state
candidate_energy <- objective_function(candidate_state)
# Update the current state and energy if the candidate state is better
if (candidate_energy < current_energy) {
current_state <- candidate_state
current_energy <- candidate_energy
} else {
# Accept the candidate state with a certain probability
if (runif(1) < exp(-(candidate_energy - current_energy) / T)) {
current_state <- candidate_state
current_energy <- candidate_energy
}
}
# Update the temperature
if (steps %% length(cooling_schedule) == 0) {
T <- cooling_schedule[which(steps == length(cooling_schedule)) + 1]
}
}
return(list(state = current_state, energy = current_energy))
}
# Assuming 'recorded_energies' is a list of energy values recorded at each step
library(ggplot2)
ggplot(data.frame(time = 1:length(recorded_energies), energy = recorded_energies),
aes(x = time, y = energy)) +
geom_line() +
geom_point() +
labs(title = "Minimum Recorded by Time t", x = "Time", y = "Energy")
# Function to evaluate the objective function J(x)
J <- function(x) {
x1 <- x[1]
x2 <- x[2]
return(sqrt((1.5-x1+x1*x2) ² + (2.25-x1+x1*x2) ² + (2.625*x1+x1*x2) ²)))
library(ggplot2)
ggplot(data.frame(time = 1:length(recorded_energies), energy = recorded_energies),
aes(x = time, y = energy)) +
geom_line() +
geom_point() +
labs(title = parse(text = "Minimum Recorded by Time ~t~ t"), x = parse(text = "Time ~t~ t"), y = "Energy")
J <- function(x) {
return(sqrt((1.5-x[1]+x[1]*x[2])^2 + (2.25-x[1]+x[1]*x[2]^2)^2 + (2.625*x[1]+x[1]*x[2]^2)^2)))
J <- function(x) {
return(sqrt((1.5-x[1]+x[1]*x[2])^2 + (2.25-x[1]+x[1]*x[2]^2)^2 + (2.625*x[1]+x[1]*x[2]^2)^2)))
J <- function(x) {
return(sqrt((1.5-x[1]+x[1]*x[2])^2 + (2.25-x[1]+x[1]*x[2]^2)^2 + (2.625*x[1]+x[1]*x[2]^2)^2)))
J <- function(x) {
return(sqrt((1.5-x[1]+x[1]*x[2])^2 + (2.25-x[1]+x[1]*x[2]^2)^2 + (2.625*x[1]+x[1]*x[2]^2)^2)))
J <- function(x) {
return(sqrt((1.5-x[1]+x[1]*x[2])^2 + (2.25-x[1]+x[1]*x[2]^2)^2 + (2.625*x[1]+x[1]*x[2]^2)^2)))
J <- function(x) {
return(sqrt((1.5-x[1]+x[1]*x[2])^2 + (2.25-x[1]+x[1]*x[2]^2)^2 + (2.625*x[1]+x[1]*x[2]^2)^2)))
J <- function(x) {
return(sqrt((1.5-x[1]+x[1]*x[2])^2 + (2.25-x[1]+x[1]*x[2]^2)^2 + (2.625*x[1]+x[1]*x[2]^2)^2))
}
J <- function(x) {
return(sqrt((1.5-x[1]+x[1]*x[2])^2 + (2.25-x[1]+x[1]*x[2]^2)^2 + (2.625*x[1]+x[1]*x[2]^2)^2))
}
x_values <- seq(-4.5, 4.5, length.out=1000)
y_values <- sapply(x_values, function(x) J(c(x,0))))
# Initial state
x_initial <- c(0,0)
# Nomination kernel
n_kernel <- function(x) {
S(x) <- list(c(x[1]+0.01, x[2]-0.01), c(x[1]+0.01, x[2]), c(x[1]+0.01, x[2]+0.01)),
knitr::opts_chunk$set(echo = TRUE)
J <- function(x) {
return(sqrt((1.5-x[1]+x[1]*x[2])^2 + (2.25-x[1]+x[1]*x[2]^2)^2 + (2.625*x[1]+x[1]*x[2]^2)^2)))
J <- function(x) {
return(sqrt((1.5-x[1]+x[1]*x[2])^2 + (2.25-x[1]+x[1]*x[2]^2)^2 + (2.625*x[1]+x[1]*x[2]^2)^2))
}
x_values <- seq(-4.5, 4.5, length.out=1000)
y_values <- sapply(x_values, function(x) J(c(x,0))))
# Objective function
J <- function(x) {
x1 <- x[1]
x2 <- x[2]
return(sqrt((1.5 - x1 + x1*x2) ² + (2.25 - x1 + x1*x2^2) ² + (2.625*x1 + x1*x2^2) ²))
# Objective function
J <- function(x) {
x1 <- x[1]
x2 <- x[2]
return(sqrt((1.5 - x1 + x1*x2)^2 + (2.25 - x1 + x1*x2^2) ² + (2.625*x1 + x1*x2^2)^2))
# Objective function
J <- function(x) {
x1 <- x[1]
x2 <- x[2]
return(sqrt((1.5 - x1 + x1*x2)^2 + (2.25 - x1 + x1*x2^2)^2 + (2.625*x1 + x1*x2^2)^2))
}
# Initialization
x0 <- c(0,0)
T <- 1
t <- 1
n <- 100
record <- c()
# Simulated Annealing
for (k in 1:n) {
# Nominating kernel
xe <- x0 + 0.01 * runif(2, -1, 1)
# Acceptance function
if (J(xe) < J(x0)) {
x0 <- xe
} else {
u <- runif(1)
if (u < exp(-(J(xe) - J(x0))/T)) {
x0 <- xe
}
}
# Update the temperature
T <- T / (1 + 0.0001*k)
# Record the minimum
record <- c(record, J(x0))
# Update the time
t <- t + 1
}
# Plot the objective function and the minimum recorded by time
plot(J, -4.5, 4.5, ylim = c(0,1), main = "Objective Function", xlab = "x₁", ylab = "J(x)")
curve(J(x), -4.5, 4.5, ylim = c(0, 1), main = "Objective Function", xlab = "x₁", ylab = "J(x)")
curve(J, -4.5, 4.5, ylim = c(0, 1), main = "Objective Function", xlab = "x₁", ylab = "J(x)")
curve(J, -4.5, 4.5, ylim = rep(0, 1), main = "Objective Function", xlab = "x₁", ylab = "J(x)")
curve(J, -4.5, 4.5, ylim = seq(0, 1), main = "Objective Function", xlab = "x₁", ylab = "J(x)")
curve(J, -4.5, 4.5, main = "Objective Function", xlab = "x₁", ylab = "J(x)")
# Load the glasgo library
library(glasgo)
install.packages("glasgo")
# Define the objective function J(x)
objective.function <- function(x) {
return(sum(x^2))
}
# Set the initial solution
x0 <- c(-4.5, 4.5)
# Set the search direction
direction <- c(1, 1)
# Set the parameter values
T <- 1000 # Initial temperature
cool <- 0.9 # Cooling factor
perturb <- 0.1 # Perturbation size
iter <- 1000 # Number of iterations
# Simulated Annealing using optim
sa_optim <- function(x) {
return(objective.function(x) + sum((x - x0) * direction))
}
result <- optim(par = x0, fn = sa_optim, method = "SANN", control = list(maxit = iter, temp = T, trace = 1))
# Print the result
print(result$par)
library(optim)
#library(optim)
# Define the objective function J(x)
objective.function <- function(x) {
return(sum(x^2))
}
# Set the initial solution
x0 <- c(-4.5, 4.5)
# Set the search direction
direction <- c(1, 1)
# Set the parameter values
T <- 1000 # Initial temperature
cool <- 0.9 # Cooling factor
perturb <- 0.1 # Perturbation size
iter <- 1000 # Number of iterations
# Simulated Annealing using optim
sa_optim <- function(x) {
return(objective.function(x) + sum((x - x0) * direction))
}
result <- optim(par = x0, fn = sa_optim, method = "SANN", control = list(maxit = iter, temp = T, trace = 1))
# Print the result
print(result$par)
install.packages("GA")
# Load the GA library
library(GA)
# Define the objective function J(x)
objective.function <- function(x) {
return(sqrt((1.5 - x[1] + x[1] * x[2])^2 + (2.25 - x[1] + x[1] * x[2]^2)^2 + (2.625 * x[1] + x[1] * x[2]^2)^2))
}
# Set the bounds for the rectangle
lower_bound <- c(-4.5, -4.5)
upper_bound <- c(4.5, 4.5)
# Set the parameters for the GA
GA_params <- gaControl(
fitness = objective.function,
min = TRUE,
popSize = 50,  # Population size
maxiter = 100,  # Maximum number of generations
run = 100  # Number of runs
)
# Load the GA library
library(GA)
library(GA)
# Objective function
J <- function(x) {
sum(abs(x)^3)
}
# Define GA
fitness <- function(x) {
-J(x)
}
GA <- ga(type = "binary", fitness = fitness, n = 50, maxiter = 500, run = 1)
library(GA)
# Objective function
J <- function(x) {
sum(abs(x)^3)
}
# Define GA
fitness <- function(x) {
-J(x)
}
GA <- ga(type = "binary", fitness = fitness, n = 50, maxiter = 500, run = 1, ranges = cbind(rep(-4.5, 50), rep(4.5, 50)))
# Load the GA library
library(GA)
# Define the objective function J(x)
objective.function <- function(x) {
return(sqrt((1.5 - x[1] + x[1] * x[2])^2 + (2.25 - x[1] + x[1] * x[2]^2)^2 + (2.625 * x[1] + x[1] * x[2]^2)^2))
}
# Set the bounds for the rectangle
lower_bound <- c(-4.5, -4.5)
upper_bound <- c(4.5, 4.5)
# Set the parameters for the GA
GA_params <- gaControl(
fitness = function(x) -objective.function(x),  # Minimization, so negate the objective function
popSize = 50,  # Population size
maxiter = 100,  # Maximum number of generations
run = 100,  # Number of runs
PCrossover = 0.8,  # Crossover probability
PMutation = 0.1  # Mutation probability
)
# Load the GA library
library(GA)
# Define the objective function J(x)
objective.function <- function(x) {
return(sqrt((1.5 - x[1] + x[1] * x[2])^2 + (2.25 - x[1] + x[1] * x[2]^2)^2 + (2.625 * x[1] + x[1] * x[2]^2)^2))
}
# Set the bounds for the rectangle
lower_bound <- c(-4.5, -4.5)
upper_bound <- c(4.5, 4.5)
# Define the fitness function for minimization
fitness_function <- function(x) -objective.function(x)
# Set the parameters for the GA
GA_params <- gaControl(
fitness = fitness_function,
popSize = 50,  # Population size
maxiter = 100,  # Maximum number of generations
run = 100,  # Number of runs
PCrossover = 0.8,  # Crossover probability
PMutation = 0.1  # Mutation probability
)
# Load the GA library
library(GA)
# Define the objective function J(x)
objective.function <- function(x) {
return(sqrt((1.5 - x[1] + x[1] * x[2])^2 + (2.25 - x[1] + x[1] * x[2]^2)^2 + (2.625 * x[1] + x[1] * x[2]^2)^2))
}
# Set the bounds for the rectangle
lower_bound <- c(-4.5, -4.5)
upper_bound <- c(4.5, 4.5)
# Define the fitness function for minimization
fitness_function <- function(x) -objective.function(x)
# Set the parameters for the GA
GA_params <- gaControl(
fitness = fitness_function,
popSize = 50,  # Population size
maxiter = 100,  # Maximum number of generations
run = 100,  # Number of runs
PCrossover = 0.8,  # Crossover probability
PMutation = 0.1  # Mutation probability
)
GA <- ga(type = "binary", fitness = fitness, n = 50, maxiter = 500, run = 1, ranges = cbind(rep(-4.5, 50), rep(4.5, 50))))
GA <- ga(type = "binary", fitness = fitness, n = 50, maxiter = 500, run = 1, ranges = cbind(rep(-4.5, 50), rep(4.5, 50)))
GA <- ga(type = "binary", fitness = fitness, n = 50, maxiter = 500, run = 1, ranges = cbind(rep(-4.5, 50), rep(4.5, 50))
# Define the objective function
fitness <- function(x) {
sum((x-5)^2)
}
# Set the seed for reproducibility
set.seed(123)
# Define the ranges of variables
ranges <- cbind(rep(-4.5, 50), rep(4.5, 50))
# Run the GA
GA <- ga(type = "binary", fitness = fitness, n = 50, maxiter = 500, run = 1, ranges = ranges)
# Define the objective function
fitness <- function(x) {
sum((x-5)^2)
}
# Set the seed for reproducibility
set.seed(123)
# Define the ranges of variables
ranges <- matrix(c(-4.5, 4.5), nrow = 50, byrow = TRUE)
# Run the GA
GA <- ga(type = "binary", fitness = fitness, n = 50, maxiter = 500, run = 1, ranges = ranges)
install.packages("tidymodels")
library(tidyverse)
setwd("C:/Users/NYONGESA/Documents/Econometric_regression")
library(readxl)
X2013lifeexpectancy <- read_excel("2013lifeexpectancy.xls")
View(X2013lifeexpectancy)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
df<- read_excel("2013lifeexpectancy.xls")
View(df)
# Fit the simple linear regression model
model <- lm(Life_Expectancy ~ Alcohol, data = df)
# Print the summary of the model
summary(model)
# Fit the multiple linear regression model
model_multiple <- lm(Life_Expectancy ~ Alcohol + Schooling + BMI, data = df)
# Print the summary of the model
summary(model_multiple)
# Fit the simple model without new variables
model_simple <- lm(Life_Expectancy ~ Alcohol, data = df)
# Perform ANOVA test to compare models
anova_result <- anova(model_simple, model_multiple)
print(anova_result)
# Fit the simple linear regression model
model_simple <- lm(Life_Expectancy ~ Alcohol, data = df)
# Print the summary of the model
summary(model_simple)
# Fit the simple model without new variables
model_simple <- lm(Life_Expectancy ~ Alcohol, data = df)
# Perform ANOVA test to compare models
anova_result <- anova(model_simple, model_multiple)
print(anova_result)
# Assuming your data frame is named 'df'
# Fit the multiple linear regression model with a quadratic term for Schooling
model_quadratic <- lm(Life_Expectancy ~ Alcohol + Schooling + I(Schooling^2) + BMI, data = df)
# Print the summary of the model
summary(model_quadratic)
# Assuming your data frame is named 'df'
# Fit the multiple linear regression model with a quadratic term for Schooling
model_quadratic <- lm(Life_Expectancy ~ Alcohol + Schooling + I((Schooling)^2) + BMI, data = df)
# Print the summary of the model
summary(model_quadratic)
# AIC and BIC for Model I
AIC_model_I <- AIC(model_multiple)
BIC_model_I <- BIC(model_multiple)
# AIC and BIC for Model II
AIC_model_II <- AIC(model_quadratic)
BIC_model_II <- BIC(model_quadratic)
# Print AIC and BIC values
cat("AIC Model I:", AIC_model_I, "\n")
cat("BIC Model I:", BIC_model_I, "\n")
cat("\n")
cat("AIC Model II:", AIC_model_II, "\n")
cat("BIC Model II:", BIC_model_II, "\n")
# Fit the simple linear regression model
model_simple <- lm(Life_Expectancy ~ Alcohol, data = df)
# Print the summary of the model
summary(model_simple)
# Fit the multiple linear regression model
model_multiple <- lm(Life_Expectancy ~ Alcohol + Schooling + BMI, data = df)
# Print the summary of the model
summary(model_multiple)
# Fit the simple model without new variables
model_simple <- lm(Life_Expectancy ~ Alcohol, data = df)
# Perform ANOVA test to compare models
anova_result <- anova(model_simple, model_multiple)
print(anova_result)
# Fit the multiple linear regression model with a quadratic term for Schooling
model_quadratic <- lm(Life_Expectancy ~ Alcohol + Schooling + I((Schooling)^2) + BMI, data = df)
# Print the summary of the model
summary(model_quadratic)
# Fit the simple linear regression model
model_simple <- lm(Life_Expectancy ~ Alcohol, data = df)
# Print the summary of the model
summary(model_simple)
# Fit the multiple linear regression model
model_multiple <- lm(Life_Expectancy ~ Alcohol + Schooling + BMI, data = df)
# Print the summary of the model
summary(model_multiple)
# Fit the simple model without new variables
model_simple <- lm(Life_Expectancy ~ Alcohol, data = df)
# Perform ANOVA test to compare models
anova_result <- anova(model_simple, model_multiple)
print(anova_result)
# Fit the multiple linear regression model with a quadratic term for Schooling
model_quadratic <- lm(Life_Expectancy ~ Alcohol + Schooling + I((Schooling)^2) + BMI, data = df)
# Print the summary of the model
summary(model_quadratic)
library(knitr)
# Fit the simple linear regression model
model_simple <- lm(Life_Expectancy ~ Alcohol, data = df)
# Print the summary of the model
summary(model_simple)
# Print the summary of the model using kable
kable(summary(model_simple)$coefficients, caption = "Summary of Simple Linear Regression Model")
# Print the summary of the model using kable in markdown format
kable(summary(model_simple)$coefficients, format = "markdown", caption = "Summary of Simple Linear Regression Model")
# Print the summary of the model using kable in markdown format
kable(summary(model_simple)$coefficients, format = "html", caption = "Summary of Simple Linear Regression Model")
# Print the summary of the model using kable in markdown format
kable(summary(model_simple)$coefficients, format = "markdown", caption = "Summary of Simple Linear Regression Model")
library(knitr)
# Fit the simple linear regression model
model_simple <- lm(Life_Expectancy ~ Alcohol, data = df)
# Print the summary of the model
summary(model_simple)
library(modelsummary)
install.packages("modelsummary")
library(modelsummary)
library(modelsummary)
modelsummary(model_simple, output = "markdown")
modelsummary(model_multiple), output = "markdown")
# Fit the multiple linear regression model
model_multiple <- lm(Life_Expectancy ~ Alcohol + Schooling + BMI, data = df)
# Print the summary of the model
summary(model_multiple)
modelsummary(model_multiple), output = "markdown")
modelsummary(model_multiple, output = "markdown")
library(modelsummary)
# Print the summary of the model using modelsummary with horizontal display
modelsummary(model_simple, coef.style = "horizontal", output = "markdown")
library(modelsummary)
modelsummary(model_simple, output = "markdown")
modelsummary(model_quadratic, output = "markdown")
# Print the ANOVA results using kable
kable(anova_result, format = "markdown", caption = "ANOVA Test Results for Model Comparison")
knitr::opts_chunk$set(echo = TRUE)
# Fit the logarithmic model
log_model <- lm(log(Life_Expectancy) ~ Alcohol + log(Schooling) + BMI, data = df)
# Print the summary of the logarithmic model
summary(log_model)
